<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用pyqt5完成python环境下的GUI设计以及cv2相关操作</title>
      <link href="/2020/04/15/pyqt5/"/>
      <url>/2020/04/15/pyqt5/</url>
      
        <content type="html"><![CDATA[<h2 id="pyqt5环境配置"><a href="#pyqt5环境配置" class="headerlink" title="pyqt5环境配置"></a>pyqt5环境配置</h2><ul><li><p>我使用的是pycharm+Ubuntu16.04，网上关于环境配置的博客很多，我也是参考了别人的博客，这里简单写一下</p></li><li><p>第三方库下载，在终端使用pip安装即可，由于我使用<code>anaconda</code>创建的虚拟环境<code>pytorch_yolo3</code>，所以先激活环境</p><pre class="line-numbers language-bash"><code class="language-bash"> conda activate pytorch_yolo3  pip <span class="token function">install</span> pyqt5 pip <span class="token function">install</span> pyqt5-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立pyqt5和pycharm的连接<br>在<code>pycharm</code>中，点击<code>file-&gt;Settings-&gt;Tools-&gt;External Tools</code>,然后点击<code>+</code>，之后的界面如下，名字可自取，<code>Groups</code>也可以写成<code>Qt</code>，这样之后点开<code>External Tools</code>时就会有一个文件夹<code>Qt</code>，里面包含了这里建立的工具。<code>Programs</code>是指这个工具的位置,在linux系统下，程序的路径为<code>/usr/lib/x86_64-linux-gnu/qt5/bin/designer</code>，其余按照图中设置即可<br><img src="https://img-blog.csdnimg.cn/20200415232455901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="QtDesiner" loading="lazy"><code>QtDesigner</code>这个工具可以很方便地设计GUI以及布局等等，它会生成一个<code>.ui</code>文件，要使用这个窗口，还需要将这个文件编译成<code>.py</code>文件，这个工具就是<code>PyUIC</code>，它建立的过程和上面类似，再点击<code>+</code>号，<code>Program</code>填写你当前的Python编译器所在路径，<code>Arguments</code>填写<code>houtExtension$.py</code>，其他和图中填写一致即可<br><img src="https://img-blog.csdnimg.cn/20200415233119335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="PyUIC" loading="lazy"></p><h2 id="pyqt5的使用"><a href="#pyqt5的使用" class="headerlink" title="pyqt5的使用"></a>pyqt5的使用</h2></li><li><p>创建UI以及转换为py文件<br>在<code>pycharm</code>下新建一个<code>.py</code>文件，然后点击菜单栏中的<code>tools-&gt;External-Tools-&gt;QtDesigner</code>,然后就会弹出<code>designer</code>这个强大的工具了，具体怎么设计大家可自行另外学习，挺简单的，傻瓜式操作，尤其要注意的是各个控件的对象名，这个会在Python程序中着重使用到，我的设计如下图所示：左上角区域是两个按键控制程序、两个文本框显示信息，一个<code>label</code>用于加载图标，因为这个项目是做安全帽检测且面向应用的，所以当检测到有人没有佩戴安全帽时，加载警告图标到这个<code>label</code>上；左下角是一个<code>label</code>，它的作用是显示摄像头中的原始数据流，二右边的label则是显示检测完成后的带框的数据流，设计过程中使用了样式表，让空间边框颜色和半径有所改变，以及按键在鼠标悬停和按下时的背景颜色做出改变，设计完成后，保存，文件名为<code>GUI.ui</code>，放在Python工程文件夹下，将ui文件拖入<code>pycharm</code>中，然后在该文件窗口右键选择<code>External-Tools-&gt;PyUIC</code>，成功运行后就会产生<code>GUI.py</code>，打开这个文件会发现里面有一个<code>Ui_MainWindow</code>类，这个就是后面构建窗口用到的类了，要修改布局则需要在<code>designer</code>中做出修改，然后保存，重复<code>PyUIC</code>的步骤。</p><img src="https://img-blog.csdnimg.cn/20200415233914932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" height="350" width = "720" loading="lazy"></li><li><p>在Python中实现逻辑功能<br>  在<code>pycharm</code>中新建一个Python文件，导入必要的库以及刚才建立的窗口</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QFileDialog<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">,</span> QDockWidget<span class="token punctuation">,</span> QListWidget <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> GUI <span class="token keyword">import</span> Ui_MainWindow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后定义自己的类</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">class</span> <span class="token class-name">mywindow</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#窗口类</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         super<span class="token punctuation">(</span>mywindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>         self<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"helmet-detection.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#设置窗口程序图标</span>         self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"安全帽检测 v1.2"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置窗口程序标题</span>         self<span class="token punctuation">.</span>cap_button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cap_button_function<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开摄像头按键槽连接，cap_button是按键对应的对象名</span>         self<span class="token punctuation">.</span>det_button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>det_button_function<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 安全帽检测按键槽连接</span>        <span class="token keyword">def</span> <span class="token function">cap_button_function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#要做的事</span>        <span class="token keyword">def</span> <span class="token function">det_button_function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#要做的事</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类中首先是初始化函数，这个函数可以做一些界面初始化工作以及各种变量和槽连接，上面的代码中我设置了窗口的图标和标题，以界面中左上角的两个按钮为例，我把它们的对象名取为<code>cap_button</code>和<code>det_button</code>，槽连接就是当按下这个按钮时就会触发槽函数，上面的槽函数分别为<code>cap_button_function</code>和<code>det_button_function</code>。<code>pyqt5</code>的简单应用记录到此，后面记录多线程等坑。</p></li></ul><h2 id="pyqt5中的多线程"><a href="#pyqt5中的多线程" class="headerlink" title="pyqt5中的多线程"></a>pyqt5中的多线程</h2><ul><li>本项目要实现的功能是读取摄像头数据，运行<code>yolov3</code>模型的目标检测算法，然后将检测结果显示出来，其中，算法是非常耗费资源的，之前在单独做目标识别时只使用了<code>opencv</code>，直接将检测结果显示出来，而显示窗口的时候其实<code>opencv</code>是使用了多线程，第一次将代码移植到<code>pyqt5</code>中时，发生了一些有趣的事，当使用<code>cv2.imshow()</code>显示检测结果时，Qt窗口程序运行正常，显示也正常，当注释掉<code>cv2.imshow()</code>时，程序就卡死了，其实分析一下原因很简单，在主线程中执行如此耗费硬件资源的算法时，主线程就会被阻塞，程序不死才怪，这也是我猜想<code>opencv</code>显示图形窗口使用了多线程的原因。好了，要解决这个问题，就要使用<code>pyqt5</code>中的多线程。</li></ul><ol><li><p>线程划分<br>根据要实现的任务，我将线程划分为4个，一旦开启摄像头，就必须不间断地读取视频流，不管检测算法是否运行所以<code>读取视频流</code>为第一个线程，<code>运行检测算法</code>自然而然地成为了第二个线程，刷新界面上的图像其实可以使用定时器，每30ms刷新一次即可，而计时器对应的响应函数运行是也是多线程的。所以一共有4个线程。</p></li><li><p>pyqt5多线程的实现<br>和<code>C++</code>中一样，要实现Qt中的多线程，要定义自己的线程类，这个线程类继承于<code>QThread</code>，所以先定义自己的线程类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">mythread</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#执行yolo算法的线程，算法和显示是在不同的线程中执行的，以防止主线程拥塞</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>mythread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        YOLO<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>这是第一个线程类，你需要做的就是在<code>run()</code>函数下写入你想这个线程做的事，我把线程类和窗口类的定义放在了同一个文件下，这样方便使用全局变量，省去了线程间通信的麻烦，然后在窗口类中声明线程变量，在需要开启此线程时，<code>start()</code>一下就好了。</p><pre class="line-numbers language-python"><code class="language-python">  self<span class="token punctuation">.</span>sub_thread <span class="token operator">=</span> mythread<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化yolo算法线程</span>  self<span class="token punctuation">.</span>sub_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始yolo算法线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>那么其他线程呢？很简单，再构造一个类，重复上面的操作就可以了</p></li></ul><ol start="3"><li>优雅地结束子线程<br>子线程在运行时是无法指定父对象的，所以主线程结束（也就是窗口关闭）时，子线程资源并不会被回收，所以会报错，优雅地结束子线程关闭窗口才会以<code>code 0</code>结束程序。要优雅地结束子线程，就要在关闭窗口时触发的函数中做手脚，这个函数就是<code>closeEvent()</code>：<pre class="line-numbers language-python"><code class="language-python">     <span class="token keyword">def</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#关闭窗口响应函数，在这里面弹出确认框，并销毁线程</span>         <span class="token keyword">global</span> cap<span class="token punctuation">,</span>det_flag         self<span class="token punctuation">.</span>timer_camera_raw<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>timer_camera_det<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>         reply <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>question<span class="token punctuation">(</span>self<span class="token punctuation">,</span>                                                <span class="token string">'本程序'</span><span class="token punctuation">,</span>                                                <span class="token string">"是否要退出程序？"</span><span class="token punctuation">,</span>                                                QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">,</span>                                                QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span>         <span class="token keyword">if</span> reply <span class="token operator">==</span> QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">:</span>             cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>             event<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>             os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             event<span class="token punctuation">.</span>ignore<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>如上所示，结束时先暂停显示弹出确认关闭窗口，确认后先释放摄像头资源，再处理子线程，这个方法是参考别人的博客写的，具体原理我也不是很懂，之前在C++中实现时在这个函数中写的是<pre class="line-numbers language-cpp"><code class="language-cpp">  sub_thread<span class="token punctuation">.</span><span class="token function">quilt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sub_thread<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="opencv图片叠加混合"><a href="#opencv图片叠加混合" class="headerlink" title="opencv图片叠加混合"></a>opencv图片叠加混合</h2><ul><li>之所以用到这个，其实是之前想在检测到危险时在输出图片上加上警示标志，这个在opencv中的操作在这里记录一下，注释很详细，就不介绍了<pre class="line-numbers language-python"><code class="language-python">  rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> channels <span class="token operator">=</span> warning_img<span class="token punctuation">.</span>shape    <span class="token comment" spellcheck="true">#获取警告标志形状</span>  roi <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#roi是图像操作的区域</span>  gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>warning_img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#灰度化警告标志</span>  ret<span class="token punctuation">,</span> mask <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#二值化警告标志生成遮罩</span>  mask_inv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#遮罩反转，遮罩用来操作背景图片，将标志要显示的部分的像数值置为0，相当于抠出来，而反转遮罩用来将标志周边不显示的部分去掉</span>  img1_bg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>roi<span class="token punctuation">,</span> roi<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#比特运算，抠图</span>  img2_fg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>warning_img<span class="token punctuation">,</span> warning_img<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask_inv<span class="token punctuation">)</span>  dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img1_bg<span class="token punctuation">,</span> img2_fg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#执行加法</span>  img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols <span class="token punctuation">]</span><span class="token operator">=</span>dst    <span class="token comment" spellcheck="true">#将图像操作区域放入检测输出的图中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="同时播放两种声音"><a href="#同时播放两种声音" class="headerlink" title="同时播放两种声音"></a>同时播放两种声音</h2><ul><li><p>我的构思是当检测到危险时发出警报声和语音提示声，这也是实际应用中需要的，这里使用的是pygame的两个发声模块，先初始化和载入声音：</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> pygame   <span class="token comment" spellcheck="true">#用来发声音提示</span>  pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#声音输出初始化</span>  track <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"beep.wav"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#载入警报声</span>  audio <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>Sound<span class="token punctuation">(</span><span class="token string">"audio.wav"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#载入语音提示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其实在实际使用的时候<code>pygame.mixer.Sound()</code>这个方法老是出错，最终找到问题所在是因为这个模块不支持<code>mp3</code>格式的声音，而第一个是可以载入<code>mp3</code>的。在具体使用时用下面的语句，先判断声源是否在播放，否则会变成鬼畜。</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">if</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>get_busy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果当前没有播放音效，则播放，否则一直检测到危险时，警报将变成鬼畜</span>      pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>      audio<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> stop_music <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#这里是按下了暂停检测键，把音乐停掉，这个音乐会先于yolo()函数暂停，因为这个标志是在鼠标按下时有效的，而暂停检测标志是在鼠标释放的时有效的候</span>      pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>      audio<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="设置文本框只能输入数字"><a href="#设置文本框只能输入数字" class="headerlink" title="设置文本框只能输入数字"></a>设置文本框只能输入数字</h2><ul><li>这是因为我设置了一个可以改变置信度阈值的文本框，必须限制其输入内容以及输入范围和小数点位数，这在Qt里面是非常容易实现的，记录一下：<pre class="line-numbers language-python"><code class="language-python">  doubleValidator <span class="token operator">=</span> QDoubleValidator<span class="token punctuation">(</span><span class="token punctuation">)</span>  doubleValidator<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>  doubleValidator<span class="token punctuation">.</span>setNotation<span class="token punctuation">(</span>QDoubleValidator<span class="token punctuation">.</span>StandardNotation<span class="token punctuation">)</span>  doubleValidator<span class="token punctuation">.</span>setDecimals<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置精度</span>  self<span class="token punctuation">.</span>lineEdit_thresh<span class="token punctuation">.</span>setValidator<span class="token punctuation">(</span>doubleValidator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="程序功能介绍"><a href="#程序功能介绍" class="headerlink" title="程序功能介绍"></a>程序功能介绍</h2><ul><li>程序界面</li></ul><img src="https://img-blog.csdnimg.cn/20200416010210656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70"  height="350" width="720" loading="lazy"><ul><li>点击<code>开启摄像头</code>将打开摄像头或者被测试的视频，并在<code>源视频显示窗口</code>显示当前画面，摄像头每30ms读取一诊，显示则是30ms刷新一次。点击<code>安全帽检测</code>按钮，将开始载入模型并进行安全帽检测，检测结果将输出到<code>检测输出视频显示窗口</code>，由于检测算法耗费硬件资源，根据GPU性能的好坏，检测时视频帧率有所不同，所以在右上角区域显示了<code>当前帧率</code>，为了方便调试和得到更好的效果，在右上角设置了改变置信度阈值的功能。输入<code>0.10-0.90</code>的数字，点击<code>确认修改</code>即可，当检测到有人没有佩戴安全帽时，程序会发出警报声并提示佩戴安全帽，同时左上角会有文字提示和图标警告，绿色图标表示安全，红色图标则表示有潜在危险。</li></ul><img src="https://img-blog.csdnimg.cn/20200416011542345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70"  height="350" width="720" loading="lazy"><img src="https://img-blog.csdnimg.cn/2020041601161746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70"  height="350" width="720" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PN序列的产生以及相关函数的计算</title>
      <link href="/2020/03/23/PNseies/"/>
      <url>/2020/03/23/PNseies/</url>
      
        <content type="html"><![CDATA[<p>﻿ 1. 求 PN 序列并极化（给定初始序列[1 0 0 0 0 0]），c(n)代表序列第 n 个值，c(0)代表 c(N)</p><pre class="line-numbers language-cpp"><code class="language-cpp">function cout<span class="token operator">=</span><span class="token function">c</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    head<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    head_L<span class="token operator">=</span><span class="token function">logical</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cc<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    c_t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    N<span class="token operator">=</span><span class="token number">63</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span>N<span class="token punctuation">;</span>    end    <span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token number">-1</span>       temp<span class="token operator">=</span><span class="token function">cc</span><span class="token punctuation">(</span>head_L<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       cc <span class="token operator">=</span> c_t<span class="token punctuation">;</span>    end    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>求相关函数，Rc1(L1,L2)是指求 L1 抽头和 L2 抽头的互相关函数，L1=L2 则为自相关函数<br> L1:[6,1]</p><p> L2:[6,5,2,1]</p><p> L3:[6,5,4,1]</p></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token punctuation">[</span>Tao<span class="token punctuation">,</span>RC<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L2<span class="token punctuation">)</span>Rc<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Rc_T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>tao<span class="token operator">=</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">31</span>        Rc_T <span class="token operator">=</span>Rc_T<span class="token operator">+</span><span class="token function">c</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">c</span><span class="token punctuation">(</span>L2<span class="token punctuation">,</span>t<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    end    <span class="token function">Rc</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token operator">=</span>Rc_T<span class="token operator">/</span><span class="token number">63</span><span class="token punctuation">;</span>    Rc_T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>endTao<span class="token operator">=</span>tao<span class="token punctuation">;</span>RC<span class="token operator">=</span>Rc<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>Rc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>实际计算相关函数</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">%</span><span class="token operator">%</span>计算自相关函数<span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tao<span class="token punctuation">,</span>Rc61<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>Rc1是求相关函数，（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>）则是<span class="token punctuation">[</span><span class="token number">6</span>，<span class="token number">1</span><span class="token punctuation">]</span>的自相关函数<span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tao<span class="token punctuation">,</span>Rc6521<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">%</span>计算互相关函数<span class="token punctuation">[</span>tao<span class="token punctuation">,</span>cross1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>Rc1是求相关函数，（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）则是<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>和<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>的互相关函数<span class="token punctuation">[</span>tao<span class="token punctuation">,</span>cross2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>Rc61<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,1]的自相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>Rc6521<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,5,2,1]的自相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>cross1<span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">60</span> <span class="token number">60</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,1]和[6,5,2,1]的互相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>cross2<span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">60</span> <span class="token number">60</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,5,4,1]和[6,5,2,1]的互相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>cross1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>cross2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20200318143708855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="figure1" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200318143748900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="figure2" loading="lazy"><br>这是数字通信课程的一道编程作业题，这里求相关函数采用的是循环，还有很大优化空间，要注意的是序列周期延拓各个下标的值怎么映射到原始序列，这其实就是一个求模的过程，这里互相关函数figure2最大值为15，figure1最大值为17，figure2中两个抽头产生的PN序列可用来产生gold序列，他们的互相关函数不会超过<br>$$<br>2^{(n+1)/2}+1,（n为奇数）<br>$$<br>$$<br>2^{(n+2)/2}+1,（n为偶数）<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10+Ubuntu16.04+Quadro P600双系统安装以及独显驱动安装</title>
      <link href="/2020/03/18/ubuntu/"/>
      <url>/2020/03/18/ubuntu/</url>
      
        <content type="html"><![CDATA[<p>终于装完了双系统并完成了显卡配置这一步。安装双系统可以说是巨坑无数，这里从头记录一下</p><ol><li><p>烧录镜像<br>首先是制作镜像，在网上下载了Ubuntu16.04版本的iso，18.04也是可以的，然后就是烧录程序，这里需要准备一个空的U盘，烧录工具用的是UItraISO，安装好后打开烧录工具，选择镜像，注意此镜像不是放在U盘里面的。然后选择项目里面的硬盘，然后选择U盘，如果你插了其他的U盘一定要注意看看是否选对，然后选择格式化，最好选择fat-32格式，然后写入，很快，系统就写入成功了</p></li><li><p>安装系统<br>安装系统之前需要有一个硬盘空间分配给Ubuntu，右键开始图标，磁盘管理，选择较为空闲的磁盘右键，压缩卷，给50-100G之间都行，然后该分区显示未分配就表明可以了<br>接下来就要进入正题了，重启电脑进入bios，选择启动项为U盘启动，启动后选择安装Ubuntu，这里我遇到了第一个问题，卡在了图标logo界面，通过<a href="https://www.cnblogs.com/long5683/p/11178149.html" target="_blank" rel="noopener">这篇文章</a>解决了问题，这个是显卡问题，在后面还会困扰你。跟着这篇博客我成功进入了系统安装界面，里面注意的是要安装English-US版本，中文的会出问题，这也是学长前辈给我说的，所以我没有踩这颗雷，后面还有一个要注意的就是分区选择，将free space中大小为你之前分配的空间大小的分区挂载到‘/’下面，不要选错了，还有一块free space是给Windows系统留的，错了可能就会导致你的Windows“嘿嘿”，剩下的就很顺利了，成功进入到Ubuntu系统，这里每次开机都会自动进入Windows，所以如果你想进Ubuntu，就需要选择启动项为Ubuntu。</p></li><li><p>显卡驱动<br>这里是最让人头疼的，因为Ubuntu自动选择集显，所以我插上外接屏没有任何反应，这里还有一个小插曲，每次插入显示屏都会直接崩溃，其实这个就是显卡的问题，因为我没有走完上面说的有关显卡那个blog，导致了这个问题，改了那3个地方插入显示频就不崩溃了，只是没有反应。<br>接下来就开始了漫长的探索之旅，点击屏幕右上角的设置图标选择about this computer就可以看到它用的哪张图形卡，我的是NVIDIA的专业图形卡Quadro P600，这里它并没有使用，所以自然无法拓展屏，更不用说后面深度学习使用显卡了。一番摸爬滚打可算是把显卡弄好了，接下来讲讲这里的步骤，注意我的配置是Quadro P600，其他的显卡未做尝试<br>首先，讲讲我遇到的方法，第一个是自己下载驱动，也就是到官网上下载相应显卡的最新驱动，一个.run文件，然后安装。这个方法我失败了。另一种放大是ppa安装，这个个人认为更靠谱，毕竟这是NVIDIA在Linux上设立的一个驱动安装源，这个遇到的问题是速度慢。接下来讲第二种方法。<br>在装上Ubuntu的第一时间，我就对apt更换了阿里源，这个网上搜搜就搞定了，有了源，很多软件就能飞速下载了，然后加入ppa源：</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">sudo</span> add-apt-repository ppa:graphics-drivers/ppa    <span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行第二条命令的时候就开始龟速了，这暗示着这个源离你千里之外，没错，这个源服务器ppa.launchpad.net远在英国，而且好像没有镜像，这就很坑了。加入ppa源后就可以安装驱动了，安装驱动之前，你需要知道你的显卡需要哪一款驱动：<br>运行之后可以看到系统推荐的NVIDIA版本，就是有<code>recommended</code>字样的，我的是<code>nvidia-430</code>，接下来安装驱动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nvidia-430<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，我下载速度变得奇慢无比，所以我尝试了翻墙、换其他安装方法等，都失败了，解决方法如下：<br>参考了<a href="https://learnku.com/articles/33436#ecff77" target="_blank" rel="noopener">这篇博客</a><br>运行3个命令</p><pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> axel    <span class="token function">sudo</span> axel -o /usr/bin/apt-fast http://www.mattparnell.com/linux/apt-    fast/apt-fast.sh    <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/bin/apt-fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>死在了第二条命令上，这里我直接打开了那个网址，可以直接看到脚本，所以我在<code>/usr/bin</code>目录下创建了文件<code>apt-fast</code>，然后将脚本内容复制进去，第三条命令是给这个脚本权限，然后执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt-fast <span class="token function">install</span> nvidia-430<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功，且速度还看得过去，几十KB/s，但也下了几个小时。。。装完后可以打开<code>software&amp;update</code>这个系统软件，选择<code>additional drivers</code>，如果选择的是你安装的版本，就表明成功了，也可以在这里安装，本质差不多。然后重启电脑，开始无限登录，参考了<a href="https://blog.csdn.net/kingthon/article/details/81151843" target="_blank" rel="noopener">这篇博客</a>，更改后成功进入，查看电脑信息发现用的正式我的独显，于是迫不及待地插上拓展屏，果然，成功了！显示屏的设置可以在NVIDIA的软件中设置，就是<code>NVIDIA X Server Settings</code>，还有就是系统设置里面的<code>display</code>里面可以设置，今天就记录到这里吧，其他问题可以留言一起探讨。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
