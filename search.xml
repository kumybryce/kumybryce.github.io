<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo 博客创建、部署、美化过程记录</title>
      <link href="kumybryce.github.io/2020/04/20/hexo/"/>
      <url>kumybryce.github.io/2020/04/20/hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="kumybryce.github.io\assets\css\APlayer.min.css"><script src="kumybryce.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名信息工程专业的学生，编程语言没学多少，正规讲过的且了解比较深的是<code>C++</code>，也只是一些基本的编程，连<code>数据库</code>、<code>数据结构</code>还有各种算法都没学过，<code>python</code>、<code>java</code>这些就更不用说了，<code>HTML</code>语言、<code>CSS</code>、<code>JavaScript</code>更是只听说过了。当然，我们还学过一点点<code>汇编</code>，非常浅显地学习过<code>HDL</code>语言，毕竟是个工科生，软硬都得沾点边，当然，<code>matlab</code>也是学过的，这是科研神器。但是，无论是项目中还是比赛中又或者是个人需要，都可能会用到上面没有学过的语言，上学期的<code>计算机图形学</code>更是直接让我们用<code>JS</code>和<code>HTML</code>编写<code>WEBGL</code>，这对于完全没学过这两门语言的人来讲简直是灾难，编程全靠看历程猜语法，结果只能是借助第三方库。。。又比如<code>机器学习</code>，<code>python</code>自然必不可少，网站前端又得使用更多的动态语言，所以要想做自己想做的东西，就得不停利用闲暇时间自学这些语言，有些会系统地学，有些因为赶时间只是临时查一下。好了，废话说的太多了，这篇文章就是记录一下自己搭建<code>hexo博客</code>过程中遇到的困难和解决的措施以及待解决的问题，旨在记录，以免回头连自己都忘了，当然也希望有像我一样背景的，想要搭建hexo博客得小白，能从这篇文章中得到一些帮助，更希望专业的朋友能够给我宝贵的意见。</p><h2 id="hexo介绍"><a href="#hexo介绍" class="headerlink" title="hexo介绍"></a>hexo介绍</h2><p><code>hexo</code>是用于搭建个人博客的，就像<code>wordpress</code>那样，不过<code>wordpress</code>更适合做网站，比较臃肿，<code>wordpress</code>的插件也是相当丰富，非常适合小白建站。<code>hexo</code>是轻量化的博客搭建工具，它可以以静态页面形式部署在代码托管网站上，比如<code>GitHub</code>、<code>Gitee</code>、<code>Coding</code>等，<code>hexo</code>社区也有很多别人开发好的主题以及各种插件，这些代码都是开源的，可以在<code>GitHub</code>上获取，并且他们的<code>readme</code>都写得十分详细，甚至有些还有专门的文档，对于小白来说如果只想实现插件有的功能，按照文档走完全没有问题。</p><h2 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h2><p>说到博客，环境说明是很重要的，大家可能会遇到这种情况，按照别人的博客教程走，结果一大堆错误，这也是让我感到十分痛苦的经历，有一句话说得好<strong>没有介绍环境的教程都是放屁</strong>，我搭建的时候是按照<a href="https://www.jianshu.com/p/84ae2ba1c133" target="_blank" rel="noopener">这篇博客</a>走的，基于<code>码云</code>（码云类似于<code>GitHub</code>，是一个代码托管网站，国内的版本，用法和<code>GitHub</code>基本一样，不过因为在国内，所以访问速度快得多），如果还没有搭建的话跟着这篇博客走一遍就好了，到后面我发现码云的页面发布是手动的，也就是说每次提交代码上去都要手动更新，当然它也不是不支持自动部署，但是要钱，对于我这种穷屌丝，emmmm，宁愿手动，但是后来因为<code>百度收录</code>的问题，我不得不转战其它托管网站，<code>GitHub</code>我就不说了，<code>Coding</code>也是一个国内的，非常好用的代码托管网站，<strong>5人以下的项目是免费的</strong>（对于个人博客，开发者当然一般只有你一个人），界面也是我喜欢的，关键是它可以自动部署，可以自定义域名（前提是你有自己的域名），这在码云上可都是收费内容啊。具体怎么迁移我后面会讲到，其实只要你在码云上部署的流程走完了，你也就明白这整个原理了，迁移到<code>coding</code>上也就分分钟的事。讲到这里，还没说我的环境，其实我已经交代的差不多了，因为是跟着上面那个博客走的吗，我的环境罗列出来就是：<code>Windows10</code>，<code>hexo</code>，<code>node.js</code>，<code>git</code>，<code>gitee</code>，<code>coding</code>，<code>Chrome 80.0.3987.163</code>，hexo使用的主题是<code>hexo-theme-yun-dev</code>，这里要强调一下，这个主题我觉得开发者非常用心，特别是文档，写得十分详细，界面也好看，配置项特别多（配置项越多越好啊，说明更多可控因素可以被你傻瓜式控制，比如各种颜色、各种图标、各种插件），出于敬意，这里贴出此主题的<a href="https://github.com/YunYouJun/hexo-theme-yun" target="_blank" rel="noopener">GitHub主页</a>以及它的<a href="https://www.yunyoujun.cn/" target="_blank" rel="noopener">示例站点</a>，当然，你也可以参观一下<a href="http://www.kumybryce.work" target="_blank" rel="noopener">我的站点</a>（不要脸的求收藏）,这里顺便贴出在解决问题过程中发现的做的非常好的站点：<a href="https://www.jsonpop.cn/" target="_blank" rel="noopener">Achirou</a>（个人觉得这个人超厉害）Achirou网站部署在阿里云上的（服务器要钱）静态文件加速和pjax动态替换让其网站访问体验极佳！</p><h2 id="我使用hexo的大致流程（没啥参考的）"><a href="#我使用hexo的大致流程（没啥参考的）" class="headerlink" title="我使用hexo的大致流程（没啥参考的）"></a>我使用hexo的大致流程（没啥参考的）</h2><p>因为我的博客主要记录一下编程过程中遇到的问题，所以最常用的就是发布文章，当然随着学习的越加深入，我也会开始在站点上记录个人生活的点滴，相册啊啥的，到写这篇文章(2020/4/20)为止，博客上只写了几篇编程的博客，因为刚开始嘛嘻嘻。进入正题，我的流程就是：</p><ol><li>CSDN编辑文章</li></ol><blockquote><p>在线编辑markdown嘛，方便快捷，其实它还有很多好处，就是CSDN为你提供了图床，在其他地方发布只需要把文章导出为markdown就行，文章中的图片不会失效，当然你也可以自己做图床，本地编辑，具体就百度吧哈哈哈哈<br>2. 小书匠本地调整<br>其实就是需要简单修改一下文字布局啥的时候本地的markdown编辑器，做的挺好的，还可以切换主题，自定义图床等，但我懒（其实是之前在码云和GitHub上尝试过，只是失败了哈哈哈哈），所以不用这个编辑器插入图片<br>3. <code>markdown</code>文件放到hexo本地文件系统的<code>post</code>中（废话），<code>hexo g -d</code>推送<br>4. 码云手动部署，当然coding上就不用了</p></blockquote><h2 id="迁移Coding"><a href="#迁移Coding" class="headerlink" title="迁移Coding"></a>迁移Coding</h2><p>迁移到<code>coding</code>上其实很简单，按照上面的步骤，在<code>Coding</code>上建立仓库和项目，然后在<code>项目设置-&gt;功能开关</code>中开启<code>持续部署</code>和<code>持续集成</code>功能：<br><img src="https://img-blog.csdnimg.cn/20200420205534660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"><br>然后在项目中就可以持续部署为<code>静态网站</code>了：<br><img src="https://img-blog.csdnimg.cn/20200420205741985.png" alt="在这里插入图片描述" loading="lazy"><br>新建一个网站，就部署起来了，点击网站中的设置可以更改域名，将域名以CNAME方式解析到这个网站，然后再在<code>Coding</code>中增加域名，可以增加多个。</p><h2 id="修改主题-持续更新"><a href="#修改主题-持续更新" class="headerlink" title="修改主题(持续更新)"></a>修改主题(持续更新)</h2><p>博客这个坑之深是我等初级程序猿所无法想象的，但这是一个很好的展示平台，可以借此机会学习很多很多实用的前端知识！修改主题这一部分除了主题的文档，也就是这个主题集成的功能外想要加其他的功能或者修改一些小效果就需要一些编程知识了，我也是临时摸打总结的一点经验，后面会系统的去学习这些语言，慢慢更新吧。</p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>先展示一下我的文件结构，介绍主要文件的作用，这对于修改主题必然是会有很大帮助的，当然，不一样的主题文件结构会不同，用的语言母版也有所不同，但文件结构大同小异，你只要知道有哪些必要的文件，对应于你的主题就好找多了</p><blockquote><h4 id="主文件夹结构"><a href="#主文件夹结构" class="headerlink" title="主文件夹结构"></a><code>主文件夹结构</code><img src="https://img-blog.csdnimg.cn/20200420145628956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="主文件结构" loading="lazy"></h4><p>这是主文件结构，<code>hexo</code>是我的博客本地文件，我单独放在了<code>E盘</code>，hexo便是在这里初始化的，每次本地调试和推送的时候也是在这个文件夹内<code>git bash here</code>的，这个文件夹下面的文件我介绍一下，<code>live2d_models</code>是我添加的一个看板娘插件需要的，所以你们一开始是没有这个文件夹的，<code>.vs</code>是<code>visual studio</code>生成的，因为我使用<code>VS</code>来编辑代码的，很好用，特别是写<code>css</code>的时候，颜色啥的直接可以弹出色板，选颜色太方便了，然后其他的文件夹应该都一样，其中重要的是<code>_config.yml</code>，这是主配置文件，主题也有自己的配置文件，就叫它辅配置文件吧哈哈，后面再介绍。<code>package.json</code>里面记录了你安装的第三方插件和一些工具，<code>source</code>是你的文章、标签、目录等内容，<code>themes</code>是主题文件，各种资源（如图片，css，js等）都是在这个里面的，<code>public</code>是发布文件夹，最后推送就是把这个文件夹的东西推到远端，而<code>hexo g</code>其实就是根据主题文件、配置文件等把一个网站根目录需要文件生成到<code>public</code>文件夹中所以改<code>public</code>中的东西是没有用的，<code>hexo clean</code>就是把<code>public</code>文件夹删除掉啦，当然还有删除<code>db.json</code>之类的。然后看看子文件夹:</p></blockquote><blockquote><h4 id="source文件夹"><a href="#source文件夹" class="headerlink" title="source文件夹"></a><code>source文件夹</code></h4><p><img src="https://img-blog.csdnimg.cn/20200420151703218.png" alt="source文件夹" loading="lazy"><br><code>_posts</code>是每次发布的文章放的地方，<code>about</code>是博客中关于你的页面，其中<code>site.md</code>是关于站点的文件，其它的主要都是<code>index.md</code>，只需要初始化一下，具体就百度吧，很简单的，要引入这些使其生效都要<code>npm install</code>插件的，各主题配置的时候文档里应该会写。</p></blockquote><blockquote><h4 id="theme文件"><a href="#theme文件" class="headerlink" title="theme文件"></a><code>theme文件</code></h4><p><img src="https://img-blog.csdnimg.cn/20200420152326786.png" alt="theme文件夹" loading="lazy"><br>这个文件夹中重要的是<code>_config.yml</code>、<code>layout</code>文件夹、<code>source</code>文件夹，<code>_config.yml</code>中配置你的主题，这不用我说了，就是辅配置文件，<code>layout</code>是布局文件，要改博客各个页面的样式和内容都在这个里面，比如主页的侧边栏你要加一张萌萌哒的动图，那么就需要找到<code>layout-&gt;_patial-&gt;sidebar.pug</code>更改即可，注意，这个主题使用的<code>html</code>生成模板语言是<code>pug</code>，其它主题可能是<code>.ejs</code>或者是其它的，其实就是一种生合成<code>html</code>的模板语言，要改又不会语言的百度学一下就好了，我这里用<code>pug</code>的时候找到<a href="https://pughtml.com/" target="_blank" rel="noopener">一个网站</a>，可以转化pug和html语言，为什么要用模板生成<code>html</code>，其实主要是<code>html</code>语法结构导致要书写很多不必要的东西，比如<code>&lt;/script&gt;</code>这种，所以就有了这些语言（只是个人推测和感觉，具体的还是要自己去查一下，我没学过<code>html</code>也没学过<code>pug</code>所以参考价值不大），你如果看到别人的博客或者某个页面的某个部件很好，就可以调出浏览器开发者工具来扒一下<code>html</code>源码，然后放到上面那个网站转换一下语言，再粘贴到对应的文件里面就可以了，注意，上述网站经过我的测试，在<code>chrome</code>中不兼容，在<code>firefox</code>中可以使用，很多在线工具如果点着不响应很有可能就是浏览器不兼容，<code>firedfox</code>做的还是很不错的。<code>source</code>文件夹是放资源的，最终会生成到<code>public</code>文件夹下，所以在调用资源的时候比如<code>source-&gt;img</code>下有一张图片，调用的相对路径就是<code>/img/**.jpg</code>，<code>css</code>文件夹是更改css要用到的，这个比较重要，还是一样，要改那个css就去这个文件夹里面找。</p></blockquote><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><p>hexo提供本地调试服务，<code>hexo s</code> 就可以开启，只要这个服务开着，你就可以在本地输入<code>http://localhost:4000/</code>访问网站，然后你修改pug文件和css文件不需要重新生成，它不和<code>public</code>挂钩，改了文件看一下<code>git bash</code>没出错就可以刷新浏览器页面看看你效果了，我使用的是<code>chrome</code>，在<code>更多工具-&gt;开发者工具</code>打开控制台。查看是否报错或者<code>html</code>和<code>css</code>是否符合预期。本地测试通过后再<code>hexo g -d</code>推送就可以了。</p><h3 id="记录我修改过的东西以及踩过的坑"><a href="#记录我修改过的东西以及踩过的坑" class="headerlink" title="记录我修改过的东西以及踩过的坑"></a>记录我修改过的东西以及踩过的坑</h3><h4 id="阿里云iconfont图标引用"><a href="#阿里云iconfont图标引用" class="headerlink" title="阿里云iconfont图标引用"></a>阿里云<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a>图标引用</h4><p>这个功能非常nice，之前用阿里云图标都是在开发软件或者做PPT、海报的时候需要用到图标在这个上面下载的，那个时候就觉得阿里云图标这个平台是在是太好了，因为好多图标网站收费图标资源还丑，iconfont完全免费，真有种高质量开源社区的感觉，所以自己上传图标都不好意思上传丑的。接下来就介绍怎么使用吧，其实<a href="https://www.iconfont.cn/help/index?spm=a313x.7781069.1998910419.13" target="_blank" rel="noopener">官方文档</a>写的非常详细，我就写写我的使用过程吧。</p><blockquote><ul><li>iconfont端<br>创建自己的项目<br><img src="https://img-blog.csdnimg.cn/20200420161822204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="iconfont" loading="lazy"><br>点击新建项目（具体位置聪明的你自己找，就在这个页面中），然后就可以搜素你想要的图标，找到后加入购物车（我也不知道为什么是这个符号），可以选很多，选完之后点击右上角的购物车，加入到你刚才创建的项目中，然后再回到上述页面，然后选择<code>symbol</code>，其它的引用方法自行查看官方文档。选择生成项目链接，就会生成一个<code>cdn</code>资源链接，关于<code>cdn</code>后面再简单介绍，具体的我也不懂。然后项目下面就会有你选的图标，然后点击复制代码就行，这个代码就可以在网中使用了，每次更新项目图标都要重新生成链接，替换刚才的链接，所以还挺麻烦。记住这个链接和图标代码</li><li>博客配置端<br>把资源链接引入到你的页面里面，我是直接在配置文件的<code>head</code>项加入的，如下图<br><img src="https://img-blog.csdnimg.cn/2020042016285571.png" alt="iconfont" loading="lazy"><br>其实就是在<code>head</code>标签中引入了这个<code>script</code>如果你的主题没有引入自己的<code>js cdn</code>资源配置项的话，就在生成head的模板文件中之家引入这个链接就好了，具体引入的程序根据模板文件来，不会的可以留言交流哦，是否引入成功可以在你的网站页面打开开发者工具看看<code>&lt;head&gt;</code>标签下是否引入。我是用这个主题支持自定义链接和联系方式啥的，还可以定义其图标，所以使用刚才的代码如下图所示<br><img src="https://img-blog.csdnimg.cn/20200420163947415.png" alt="在这里插入图片描述" loading="lazy"><br>好了，<code>iconfon</code>就记录到这里啦</li></ul></blockquote><h4 id="aplayer音乐播放器（目前还有很多问题没有得到解决）"><a href="#aplayer音乐播放器（目前还有很多问题没有得到解决）" class="headerlink" title="aplayer音乐播放器（目前还有很多问题没有得到解决）"></a><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">aplayer</a>音乐播放器（目前还有很多问题没有得到解决）</h4><p><code>aplayer</code>播放器可以说非常舒服了，这里记录一下使用过程。其实这个主题支持<code>aplayer</code>，文档也有写，但是不全，很简略。首先要下载这个插件</p><blockquote><p>num install hexo-tag-aplaye</p></blockquote><p>然后简单的来说就四行语句（pug）</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">link</span><span class="token punctuation">(</span>rel<span class="token operator">=</span><span class="token string">'stylesheet'</span><span class="token punctuation">,</span> href<span class="token operator">=</span><span class="token string">'https://cdn.jsdelivr.net/gh/kumybryce/resource@v1.107/mycdn/css/APlayer.min.css'</span><span class="token function">script</span><span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token string">'https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js'</span><span class="token punctuation">)</span><span class="token function">script</span><span class="token punctuation">(</span>src<span class="token operator">=</span><span class="token string">'https://cdn.jsdelivr.net/npm/meting@latest/dist/Meting.min.js'</span><span class="token punctuation">)</span>meting<span class="token operator">-</span>js#<span class="token number">4976294412</span><span class="token punctuation">(</span>server<span class="token operator">=</span><span class="token string">'netease'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'playlist'</span><span class="token punctuation">,</span>fixed<span class="token operator">=</span><span class="token string">'true'</span><span class="token punctuation">,</span> list<span class="token operator">-</span>folded<span class="token operator">=</span><span class="token string">'true'</span><span class="token punctuation">,</span> autoplay<span class="token operator">=</span><span class="token string">'false'</span><span class="token punctuation">,</span> volume<span class="token operator">=</span><span class="token string">'0.4'</span><span class="token punctuation">,</span> theme<span class="token operator">=</span><span class="token string">'#4fd0d8'</span><span class="token punctuation">,</span> order<span class="token operator">=</span><span class="token string">'random'</span><span class="token punctuation">,</span> loop<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span> preload<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> mutex<span class="token operator">=</span><span class="token string">'true'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>前三个是引入<code>css、aplayer.js、meting.js</code>，什么是meting呢，它是各大音乐平台支持的一种脚本啦，具体百度吧，着重讲第四句</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>meting-js#4976294412</td><td>这个就是说使用meting来加载你的音乐，歌单号是4976294412</td></tr><tr><td>server</td><td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td>开启固定模式</td></tr><tr><td>mini</td><td>开启迷你模式</td></tr><tr><td>loop</td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>歌词格式类型</td></tr><tr><td>listfolded</td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td>自动播放，移动端浏览器暂时不支持此功能</td></tr><tr><td>mutex</td><td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td></tr><tr><td>listmaxheight</td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td>播放器风格色彩设置</td></tr></tbody></table><p>没有写入的项按照默认方式给出，具体可以参考<a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">官网文档</a>。其实你把上面四句话按照自己需求改一下，然后转换成你的模板语言，最后在页面收纳柜生成html就可以了，然后如果要改样式，就需要更改<code>css</code>，因为是<code>cdn</code>引入的资源，所以你需要把这个<code>css</code>文件下载下来编辑好再引入，还是建议用<code>cdn</code>引入，这样一来你就需要构建自己的<code>cdn</code>了，下面讲讲构建自己的<code>cdn</code>。<br>我是在<code>GitHub</code>上存放我的资源的，在<code>GitHub</code>中新建仓库，然后在本地初始化，把修改后的<code>css</code>文件放进去（任何资源都可以），<code>push</code>到<code>GitHub</code>上，这些操作很基础，不懂的可以学学<code>git</code>，这里有一篇<a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000" target="_blank" rel="noopener">教程</a> 。<br>好了，现在我的博客终于有音乐播放器了，效果如下图：</p><blockquote><p><img src="https://img-blog.csdnimg.cn/2020042017260380.gif" alt="aplayer" loading="lazy"><br>什么？你的做出来没有吸附边缘？一开始播放列表就打开了？切换页面音乐停止？好叭，这都是我遇到的坑</p></blockquote><blockquote><p>首先，怎么做吸附功能，其实在<a href="https://www.jsonpop.cn/posts/19777cfa/" target="_blank" rel="noopener">这篇博客</a>中记录了怎么做吸底模式，但我失败了，所以直接用了上面的代码来搞，原理是一样的，只是他的方法是把参数接口单独拿出来放在配置文件里面了，以方便他人。那么那篇博客中的音乐播放器为什么吸附了呢？我思考了一下，最终的想法是找到播放器的标签，再在播放器的css文件中设置当鼠标悬停在箭头标签上时，将播放器的左偏移量设置为0，其它时候左偏移为负值，除了箭头那一块其它部分全部偏出屏幕，这个功能就实现了。说着简单啊，为了实现这个我查了好多资料，真是一个外行人的痛苦。更恐怖的是，当我完成之后无意间发现在那片博客的评论区就有答案，真的是蠢到家了，这告诫我们一定要把每一个参考认真读完！至于如果你想要用css控制各个元素的形态，只需要在开发者工具中找到此时对应标签所属的类，然后在其<code>css</code>文件中定义这个类的各种动作，当然，也可以直接在<code>html</code>中嵌入<code>style</code>，但不推荐。</p></blockquote><blockquote><p>然后就是一开始列表就打开，这里解决办法是将配置项中<code>mini:false</code>去掉</p></blockquote><blockquote><p>再说说切换音乐停止吧，这个问题我还没解决，每次点击链接页面都会刷新，也就意味着所有资源重新加载，音乐自然就没了，如果要让页面不重新加载，或者局部刷新，就需要pjax局部替换，这个太高级了，可以大大优化网页浏览体验，应该是先获取链接内容，然后根据html标签内容替换，可以定义哪些是局部替换的，这样就可以实现无刷新浏览了，页面切换速度也是快到飞起。如果你看到谁的博客点击文章时浏览器标签没有转圈，那么它就使用了这个技术了，目前我还遇到肯多困难，无法实现局部刷新，后面再说吧。</p></blockquote><h4 id="看板娘！敲黑板"><a href="#看板娘！敲黑板" class="headerlink" title="看板娘！敲黑板"></a>看板娘！敲黑板</h4><p>看板娘就是一个可爱的模型在你的页面中，它有各种动作，还会一直看着你的鼠标，点它还会互动之类的，现在官方的模型有一些动漫人物和动物（死宅是不是已经露出了憨憨笑？）先展示下效果吧，或者去我的博客参观。<br><img src="https://img-blog.csdnimg.cn/20200420193704587.gif" atl="看板娘" height="300" loading="lazy"><br>这个就是live2D插件啦，<a href="https://www.npmjs.com/package/hexo-helper-live2d" target="_blank" rel="noopener">官网在此</a>！先下载安装上：</p><blockquote><p>num install hexo-helper-live2d</p></blockquote><p>再下载<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">模型</a>，可以先<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">预览一下</a>，比如我是用的是<code>live2d-widget-model-shizuku</code>则</p><blockquote><p>npm install live2d-widget-model-shizuku</p></blockquote><p>完成后再博客根目录新建文件夹<code>live2d_models</code>，将<code>node_moduels</code>中的<code>live2d-widget-model-shizuku</code>复制到刚新建的文件夹中，很多博客也没有这一步，我没有试验，大家可以自己尝试一下。<br>然后在主配置文件中加入配置语句：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Live2D</span><span class="token comment" spellcheck="true">## https://github.com/xiazeyu/live2d-widget.js</span><span class="token comment" spellcheck="true">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">hHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.5</span>    <span class="token key atrule">vHeadPos</span><span class="token punctuation">:</span> <span class="token number">0.618</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>tororo // 下载的动画模型名称  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">superSample</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">120</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left // 模型在网页显示位置    <span class="token key atrule">hOffset</span><span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token key atrule">vOffset</span><span class="token punctuation">:</span> <span class="token number">50</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> true  // 移动设备是否显示    <span class="token key atrule">scale</span><span class="token punctuation">:</span> <span class="token number">0.5</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacityDefault</span><span class="token punctuation">:</span> <span class="token number">0.7</span>    <span class="token key atrule">opacityOnHover</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这个时候<code>hexo d -d</code>应该就可以看到了，反正我失败了，解决办法是在配置文件夹中加入：</p><pre class="line-numbers language-yaml"><code class="language-yaml">plugins  <span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>helper<span class="token punctuation">-</span>live2d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候又会有新问题，你会发现你连<code>hexo g</code>都不行了，报错是没有这个指令，在<code>package.json</code>中明明有这些包啊，左思右想发现是加入上面一句话的意思就是只使用这一个插件，<code>server、git</code>啥的都是插件，所以不得不把<code>package.json</code>中所有的包都写入配置文件中，这就很麻烦了，只要有新插件，就必须引入一下。。。希望你们不要遇到这种问题。</p><h4 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h4><p>其实这没啥说的，学过css的肯定觉得我在这个说这个简直就是在放屁一样，没办法，咱没学过呀，所以记录一下咯，找到<code>css-&gt;_components-&gt;sidebar-&gt;site-overview.styl</code>在头像的css里头像img下加上下面语句：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">-webkit-transition</span><span class="token punctuation">:</span> -webkit-transform <span class="token number">1.0</span>s ease-out<span class="token punctuation">;</span><span class="token property">-moz-transition</span><span class="token punctuation">:</span> -moz-transform <span class="token number">1.0</span>s ease-out<span class="token punctuation">;</span><span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">1.0</span>s ease-out <span class="token important">!important</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>img:hover</code>下加上：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h2><blockquote><p><a href="https://www.jsonpop.cn/posts/19777cfa/" target="_blank" rel="noopener">aplayer</a><br><a href="https://sevencho.github.io/archives/cb206c67.html" target="_blank" rel="noopener">看板娘</a><br><a href="https://blog.csdn.net/qq_43020645/article/details/82793753" target="_blank" rel="noopener">头像旋转</a></p></blockquote><h2 id="未解决问题"><a href="#未解决问题" class="headerlink" title="未解决问题"></a>未解决问题</h2><ol><li>aplayer无法全局播放</li><li>aplayer加入后目录无法使用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用pyqt5完成python环境下的GUI设计以及cv2相关操作</title>
      <link href="kumybryce.github.io/2020/04/15/pyqt5/"/>
      <url>kumybryce.github.io/2020/04/15/pyqt5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="kumybryce.github.io\assets\css\APlayer.min.css"><script src="kumybryce.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="pyqt5环境配置"><a href="#pyqt5环境配置" class="headerlink" title="pyqt5环境配置"></a>pyqt5环境配置</h2><ul><li><p>我使用的是pycharm+Ubuntu16.04，网上关于环境配置的博客很多，我也是参考了别人的博客，这里简单写一下</p></li><li><p>第三方库下载，在终端使用pip安装即可，由于我使用<code>anaconda</code>创建的虚拟环境<code>pytorch_yolo3</code>，所以先激活环境</p><pre class="line-numbers language-bash"><code class="language-bash"> conda activate pytorch_yolo3  pip <span class="token function">install</span> pyqt5 pip <span class="token function">install</span> pyqt5-tools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>建立pyqt5和pycharm的连接<br>在<code>pycharm</code>中，点击<code>file-&gt;Settings-&gt;Tools-&gt;External Tools</code>,然后点击<code>+</code>，之后的界面如下，名字可自取，<code>Groups</code>也可以写成<code>Qt</code>，这样之后点开<code>External Tools</code>时就会有一个文件夹<code>Qt</code>，里面包含了这里建立的工具。<code>Programs</code>是指这个工具的位置,在linux系统下，程序的路径为<code>/usr/lib/x86_64-linux-gnu/qt5/bin/designer</code>，其余按照图中设置即可<br><img src="https://img-blog.csdnimg.cn/20200415232455901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="QtDesiner" loading="lazy"><code>QtDesigner</code>这个工具可以很方便地设计GUI以及布局等等，它会生成一个<code>.ui</code>文件，要使用这个窗口，还需要将这个文件编译成<code>.py</code>文件，这个工具就是<code>PyUIC</code>，它建立的过程和上面类似，再点击<code>+</code>号，<code>Program</code>填写你当前的Python编译器所在路径，<code>Arguments</code>填写<code>houtExtension$.py</code>，其他和图中填写一致即可<br><img src="https://img-blog.csdnimg.cn/20200415233119335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="PyUIC" loading="lazy"></p><h2 id="pyqt5的使用"><a href="#pyqt5的使用" class="headerlink" title="pyqt5的使用"></a>pyqt5的使用</h2></li><li><p>创建UI以及转换为py文件<br>在<code>pycharm</code>下新建一个<code>.py</code>文件，然后点击菜单栏中的<code>tools-&gt;External-Tools-&gt;QtDesigner</code>,然后就会弹出<code>designer</code>这个强大的工具了，具体怎么设计大家可自行另外学习，挺简单的，傻瓜式操作，尤其要注意的是各个控件的对象名，这个会在Python程序中着重使用到，我的设计如下图所示：左上角区域是两个按键控制程序、两个文本框显示信息，一个<code>label</code>用于加载图标，因为这个项目是做安全帽检测且面向应用的，所以当检测到有人没有佩戴安全帽时，加载警告图标到这个<code>label</code>上；左下角是一个<code>label</code>，它的作用是显示摄像头中的原始数据流，二右边的label则是显示检测完成后的带框的数据流，设计过程中使用了样式表，让空间边框颜色和半径有所改变，以及按键在鼠标悬停和按下时的背景颜色做出改变，设计完成后，保存，文件名为<code>GUI.ui</code>，放在Python工程文件夹下，将ui文件拖入<code>pycharm</code>中，然后在该文件窗口右键选择<code>External-Tools-&gt;PyUIC</code>，成功运行后就会产生<code>GUI.py</code>，打开这个文件会发现里面有一个<code>Ui_MainWindow</code>类，这个就是后面构建窗口用到的类了，要修改布局则需要在<code>designer</code>中做出修改，然后保存，重复<code>PyUIC</code>的步骤。</p><img src="https://img-blog.csdnimg.cn/20200415233914932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" height="350" width = "720" loading="lazy"></li><li><p>在Python中实现逻辑功能<br>  在<code>pycharm</code>中新建一个Python文件，导入必要的库以及刚才建立的窗口</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QFileDialog<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">,</span> QDockWidget<span class="token punctuation">,</span> QListWidget <span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtGui <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">from</span> GUI <span class="token keyword">import</span> Ui_MainWindow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后定义自己的类</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token keyword">class</span> <span class="token class-name">mywindow</span><span class="token punctuation">(</span>QtWidgets<span class="token punctuation">.</span>QMainWindow<span class="token punctuation">,</span> Ui_MainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#窗口类</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         super<span class="token punctuation">(</span>mywindow<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>         self<span class="token punctuation">.</span>setWindowIcon<span class="token punctuation">(</span>QIcon<span class="token punctuation">(</span><span class="token string">"helmet-detection.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#设置窗口程序图标</span>         self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"安全帽检测 v1.2"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#设置窗口程序标题</span>         self<span class="token punctuation">.</span>cap_button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cap_button_function<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开摄像头按键槽连接，cap_button是按键对应的对象名</span>         self<span class="token punctuation">.</span>det_button<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>det_button_function<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 安全帽检测按键槽连接</span>        <span class="token keyword">def</span> <span class="token function">cap_button_function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#要做的事</span>        <span class="token keyword">def</span> <span class="token function">det_button_function</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#要做的事</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类中首先是初始化函数，这个函数可以做一些界面初始化工作以及各种变量和槽连接，上面的代码中我设置了窗口的图标和标题，以界面中左上角的两个按钮为例，我把它们的对象名取为<code>cap_button</code>和<code>det_button</code>，槽连接就是当按下这个按钮时就会触发槽函数，上面的槽函数分别为<code>cap_button_function</code>和<code>det_button_function</code>。<code>pyqt5</code>的简单应用记录到此，后面记录多线程等坑。</p></li></ul><h2 id="pyqt5中的多线程"><a href="#pyqt5中的多线程" class="headerlink" title="pyqt5中的多线程"></a>pyqt5中的多线程</h2><ul><li>本项目要实现的功能是读取摄像头数据，运行<code>yolov3</code>模型的目标检测算法，然后将检测结果显示出来，其中，算法是非常耗费资源的，之前在单独做目标识别时只使用了<code>opencv</code>，直接将检测结果显示出来，而显示窗口的时候其实<code>opencv</code>是使用了多线程，第一次将代码移植到<code>pyqt5</code>中时，发生了一些有趣的事，当使用<code>cv2.imshow()</code>显示检测结果时，Qt窗口程序运行正常，显示也正常，当注释掉<code>cv2.imshow()</code>时，程序就卡死了，其实分析一下原因很简单，在主线程中执行如此耗费硬件资源的算法时，主线程就会被阻塞，程序不死才怪，这也是我猜想<code>opencv</code>显示图形窗口使用了多线程的原因。好了，要解决这个问题，就要使用<code>pyqt5</code>中的多线程。</li></ul><ol><li><p>线程划分<br>根据要实现的任务，我将线程划分为4个，一旦开启摄像头，就必须不间断地读取视频流，不管检测算法是否运行所以<code>读取视频流</code>为第一个线程，<code>运行检测算法</code>自然而然地成为了第二个线程，刷新界面上的图像其实可以使用定时器，每30ms刷新一次即可，而计时器对应的响应函数运行是也是多线程的。所以一共有4个线程。</p></li><li><p>pyqt5多线程的实现<br>和<code>C++</code>中一样，要实现Qt中的多线程，要定义自己的线程类，这个线程类继承于<code>QThread</code>，所以先定义自己的线程类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">mythread</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#执行yolo算法的线程，算法和显示是在不同的线程中执行的，以防止主线程拥塞</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>mythread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        YOLO<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><p>这是第一个线程类，你需要做的就是在<code>run()</code>函数下写入你想这个线程做的事，我把线程类和窗口类的定义放在了同一个文件下，这样方便使用全局变量，省去了线程间通信的麻烦，然后在窗口类中声明线程变量，在需要开启此线程时，<code>start()</code>一下就好了。</p><pre class="line-numbers language-python"><code class="language-python">  self<span class="token punctuation">.</span>sub_thread <span class="token operator">=</span> mythread<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化yolo算法线程</span>  self<span class="token punctuation">.</span>sub_thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 开始yolo算法线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>那么其他线程呢？很简单，再构造一个类，重复上面的操作就可以了</p></li></ul><ol start="3"><li>优雅地结束子线程<br>子线程在运行时是无法指定父对象的，所以主线程结束（也就是窗口关闭）时，子线程资源并不会被回收，所以会报错，优雅地结束子线程关闭窗口才会以<code>code 0</code>结束程序。要优雅地结束子线程，就要在关闭窗口时触发的函数中做手脚，这个函数就是<code>closeEvent()</code>：<pre class="line-numbers language-python"><code class="language-python">     <span class="token keyword">def</span> <span class="token function">closeEvent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#关闭窗口响应函数，在这里面弹出确认框，并销毁线程</span>         <span class="token keyword">global</span> cap<span class="token punctuation">,</span>det_flag         self<span class="token punctuation">.</span>timer_camera_raw<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>timer_camera_det<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>         reply <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>question<span class="token punctuation">(</span>self<span class="token punctuation">,</span>                                                <span class="token string">'本程序'</span><span class="token punctuation">,</span>                                                <span class="token string">"是否要退出程序？"</span><span class="token punctuation">,</span>                                                QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>Yes <span class="token operator">|</span> QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">,</span>                                                QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>No<span class="token punctuation">)</span>         <span class="token keyword">if</span> reply <span class="token operator">==</span> QtWidgets<span class="token punctuation">.</span>QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">:</span>             cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>             event<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>             os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>             event<span class="token punctuation">.</span>ignore<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>如上所示，结束时先暂停显示弹出确认关闭窗口，确认后先释放摄像头资源，再处理子线程，这个方法是参考别人的博客写的，具体原理我也不是很懂，之前在C++中实现时在这个函数中写的是<pre class="line-numbers language-cpp"><code class="language-cpp">  sub_thread<span class="token punctuation">.</span><span class="token function">quilt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sub_thread<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="opencv图片叠加混合"><a href="#opencv图片叠加混合" class="headerlink" title="opencv图片叠加混合"></a>opencv图片叠加混合</h2><ul><li>之所以用到这个，其实是之前想在检测到危险时在输出图片上加上警示标志，这个在opencv中的操作在这里记录一下，注释很详细，就不介绍了<pre class="line-numbers language-python"><code class="language-python">  rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> channels <span class="token operator">=</span> warning_img<span class="token punctuation">.</span>shape    <span class="token comment" spellcheck="true">#获取警告标志形状</span>  roi <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#roi是图像操作的区域</span>  gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>warning_img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#灰度化警告标志</span>  ret<span class="token punctuation">,</span> mask <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#二值化警告标志生成遮罩</span>  mask_inv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>mask<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#遮罩反转，遮罩用来操作背景图片，将标志要显示的部分的像数值置为0，相当于抠出来，而反转遮罩用来将标志周边不显示的部分去掉</span>  img1_bg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>roi<span class="token punctuation">,</span> roi<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#比特运算，抠图</span>  img2_fg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>warning_img<span class="token punctuation">,</span> warning_img<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask_inv<span class="token punctuation">)</span>  dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img1_bg<span class="token punctuation">,</span> img2_fg<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#执行加法</span>  img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>rows<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span>cols <span class="token punctuation">]</span><span class="token operator">=</span>dst    <span class="token comment" spellcheck="true">#将图像操作区域放入检测输出的图中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="同时播放两种声音"><a href="#同时播放两种声音" class="headerlink" title="同时播放两种声音"></a>同时播放两种声音</h2><ul><li><p>我的构思是当检测到危险时发出警报声和语音提示声，这也是实际应用中需要的，这里使用的是pygame的两个发声模块，先初始化和载入声音：</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">import</span> pygame   <span class="token comment" spellcheck="true">#用来发声音提示</span>  pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#声音输出初始化</span>  track <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"beep.wav"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#载入警报声</span>  audio <span class="token operator">=</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>Sound<span class="token punctuation">(</span><span class="token string">"audio.wav"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#载入语音提示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其实在实际使用的时候<code>pygame.mixer.Sound()</code>这个方法老是出错，最终找到问题所在是因为这个模块不支持<code>mp3</code>格式的声音，而第一个是可以载入<code>mp3</code>的。在具体使用时用下面的语句，先判断声源是否在播放，否则会变成鬼畜。</p><pre class="line-numbers language-python"><code class="language-python">  <span class="token keyword">if</span> pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>get_busy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#如果当前没有播放音效，则播放，否则一直检测到危险时，警报将变成鬼畜</span>      pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>      audio<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> stop_music <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#这里是按下了暂停检测键，把音乐停掉，这个音乐会先于yolo()函数暂停，因为这个标志是在鼠标按下时有效的，而暂停检测标志是在鼠标释放的时有效的候</span>      pygame<span class="token punctuation">.</span>mixer<span class="token punctuation">.</span>music<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>      audio<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="设置文本框只能输入数字"><a href="#设置文本框只能输入数字" class="headerlink" title="设置文本框只能输入数字"></a>设置文本框只能输入数字</h2><ul><li>这是因为我设置了一个可以改变置信度阈值的文本框，必须限制其输入内容以及输入范围和小数点位数，这在Qt里面是非常容易实现的，记录一下：<pre class="line-numbers language-python"><code class="language-python">  doubleValidator <span class="token operator">=</span> QDoubleValidator<span class="token punctuation">(</span><span class="token punctuation">)</span>  doubleValidator<span class="token punctuation">.</span>setRange<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">)</span>  doubleValidator<span class="token punctuation">.</span>setNotation<span class="token punctuation">(</span>QDoubleValidator<span class="token punctuation">.</span>StandardNotation<span class="token punctuation">)</span>  doubleValidator<span class="token punctuation">.</span>setDecimals<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置精度</span>  self<span class="token punctuation">.</span>lineEdit_thresh<span class="token punctuation">.</span>setValidator<span class="token punctuation">(</span>doubleValidator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="程序功能介绍"><a href="#程序功能介绍" class="headerlink" title="程序功能介绍"></a>程序功能介绍</h2><ul><li>程序界面</li></ul><img src="https://img-blog.csdnimg.cn/20200416010210656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70"  height="350" width="720" loading="lazy"><ul><li>点击<code>开启摄像头</code>将打开摄像头或者被测试的视频，并在<code>源视频显示窗口</code>显示当前画面，摄像头每30ms读取一诊，显示则是30ms刷新一次。点击<code>安全帽检测</code>按钮，将开始载入模型并进行安全帽检测，检测结果将输出到<code>检测输出视频显示窗口</code>，由于检测算法耗费硬件资源，根据GPU性能的好坏，检测时视频帧率有所不同，所以在右上角区域显示了<code>当前帧率</code>，为了方便调试和得到更好的效果，在右上角设置了改变置信度阈值的功能。输入<code>0.10-0.90</code>的数字，点击<code>确认修改</code>即可，当检测到有人没有佩戴安全帽时，程序会发出警报声并提示佩戴安全帽，同时左上角会有文字提示和图标警告，绿色图标表示安全，红色图标则表示有潜在危险。</li></ul><img src="https://img-blog.csdnimg.cn/20200416011542345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70"  height="350" width="720" loading="lazy"><img src="https://img-blog.csdnimg.cn/2020041601161746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70"  height="350" width="720" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PN序列的产生以及相关函数的计算</title>
      <link href="kumybryce.github.io/2020/03/23/PNseies/"/>
      <url>kumybryce.github.io/2020/03/23/PNseies/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="kumybryce.github.io\assets\css\APlayer.min.css"><script src="kumybryce.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>﻿ 1. 求 PN 序列并极化（给定初始序列[1 0 0 0 0 0]），c(n)代表序列第 n 个值，c(0)代表 c(N)</p><pre class="line-numbers language-cpp"><code class="language-cpp">function cout<span class="token operator">=</span><span class="token function">c</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    head<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>    head_L<span class="token operator">=</span><span class="token function">logical</span><span class="token punctuation">(</span><span class="token function">head</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cc<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    c_t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    N<span class="token operator">=</span><span class="token number">63</span><span class="token punctuation">;</span>    n<span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        n<span class="token operator">=</span>n<span class="token operator">+</span>N<span class="token punctuation">;</span>    end    <span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token number">-1</span>       temp<span class="token operator">=</span><span class="token function">cc</span><span class="token punctuation">(</span>head_L<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">c_t</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       cc <span class="token operator">=</span> c_t<span class="token punctuation">;</span>    end    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>求相关函数，Rc1(L1,L2)是指求 L1 抽头和 L2 抽头的互相关函数，L1=L2 则为自相关函数<br> L1:[6,1]</p><p> L2:[6,5,2,1]</p><p> L3:[6,5,4,1]</p></li></ol><pre class="line-numbers language-cpp"><code class="language-cpp">function <span class="token punctuation">[</span>Tao<span class="token punctuation">,</span>RC<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L2<span class="token punctuation">)</span>Rc<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Rc_T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>tao<span class="token operator">=</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t<span class="token operator">=</span><span class="token operator">-</span><span class="token number">31</span><span class="token operator">:</span><span class="token number">31</span>        Rc_T <span class="token operator">=</span>Rc_T<span class="token operator">+</span><span class="token function">c</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">c</span><span class="token punctuation">(</span>L2<span class="token punctuation">,</span>t<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    end    <span class="token function">Rc</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token operator">=</span>Rc_T<span class="token operator">/</span><span class="token number">63</span><span class="token punctuation">;</span>    Rc_T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>endTao<span class="token operator">=</span>tao<span class="token punctuation">;</span>RC<span class="token operator">=</span>Rc<span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>Rc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>实际计算相关函数</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">%</span><span class="token operator">%</span>计算自相关函数<span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tao<span class="token punctuation">,</span>Rc61<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>Rc1是求相关函数，（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>）则是<span class="token punctuation">[</span><span class="token number">6</span>，<span class="token number">1</span><span class="token punctuation">]</span>的自相关函数<span class="token operator">%</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tao<span class="token punctuation">,</span>Rc6521<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">%</span>计算互相关函数<span class="token punctuation">[</span>tao<span class="token punctuation">,</span>cross1<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span>Rc1是求相关函数，（<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）则是<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>和<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>的互相关函数<span class="token punctuation">[</span>tao<span class="token punctuation">,</span>cross2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">Rc1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>Rc61<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,1]的自相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>Rc6521<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,5,2,1]的自相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>cross1<span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">60</span> <span class="token number">60</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,1]和[6,5,2,1]的互相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>tao<span class="token punctuation">,</span>cross2<span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">60</span> <span class="token number">60</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"[6,5,4,1]和[6,5,2,1]的互相关函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">"τ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ylabel</span><span class="token punctuation">(</span><span class="token string">"Rc(τ)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>cross1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>cross2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20200318143708855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="figure1" loading="lazy"><br><img src="https://img-blog.csdnimg.cn/20200318143748900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTY3MjgyOA==,size_16,color_FFFFFF,t_70" alt="figure2" loading="lazy"><br>这是数字通信课程的一道编程作业题，这里求相关函数采用的是循环，还有很大优化空间，要注意的是序列周期延拓各个下标的值怎么映射到原始序列，这其实就是一个求模的过程，这里互相关函数figure2最大值为15，figure1最大值为17，figure2中两个抽头产生的PN序列可用来产生gold序列，他们的互相关函数不会超过<br>$$<br>2^{(n+1)/2}+1,（n为奇数）<br>$$<br>$$<br>2^{(n+2)/2}+1,（n为偶数）<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 专业课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10+Ubuntu16.04+Quadro P600双系统安装以及独显驱动安装</title>
      <link href="kumybryce.github.io/2020/03/18/ubuntu/"/>
      <url>kumybryce.github.io/2020/03/18/ubuntu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="kumybryce.github.io\assets\css\APlayer.min.css"><script src="kumybryce.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>终于装完了双系统并完成了显卡配置这一步。安装双系统可以说是巨坑无数，这里从头记录一下</p><ol><li><p>烧录镜像<br>首先是制作镜像，在网上下载了Ubuntu16.04版本的iso，18.04也是可以的，然后就是烧录程序，这里需要准备一个空的U盘，烧录工具用的是UItraISO，安装好后打开烧录工具，选择镜像，注意此镜像不是放在U盘里面的。然后选择项目里面的硬盘，然后选择U盘，如果你插了其他的U盘一定要注意看看是否选对，然后选择格式化，最好选择fat-32格式，然后写入，很快，系统就写入成功了</p></li><li><p>安装系统<br>安装系统之前需要有一个硬盘空间分配给Ubuntu，右键开始图标，磁盘管理，选择较为空闲的磁盘右键，压缩卷，给50-100G之间都行，然后该分区显示未分配就表明可以了<br>接下来就要进入正题了，重启电脑进入bios，选择启动项为U盘启动，启动后选择安装Ubuntu，这里我遇到了第一个问题，卡在了图标logo界面，通过<a href="https://www.cnblogs.com/long5683/p/11178149.html" target="_blank" rel="noopener">这篇文章</a>解决了问题，这个是显卡问题，在后面还会困扰你。跟着这篇博客我成功进入了系统安装界面，里面注意的是要安装English-US版本，中文的会出问题，这也是学长前辈给我说的，所以我没有踩这颗雷，后面还有一个要注意的就是分区选择，将free space中大小为你之前分配的空间大小的分区挂载到‘/’下面，不要选错了，还有一块free space是给Windows系统留的，错了可能就会导致你的Windows“嘿嘿”，剩下的就很顺利了，成功进入到Ubuntu系统，这里每次开机都会自动进入Windows，所以如果你想进Ubuntu，就需要选择启动项为Ubuntu。</p></li><li><p>显卡驱动<br>这里是最让人头疼的，因为Ubuntu自动选择集显，所以我插上外接屏没有任何反应，这里还有一个小插曲，每次插入显示屏都会直接崩溃，其实这个就是显卡的问题，因为我没有走完上面说的有关显卡那个blog，导致了这个问题，改了那3个地方插入显示频就不崩溃了，只是没有反应。<br>接下来就开始了漫长的探索之旅，点击屏幕右上角的设置图标选择about this computer就可以看到它用的哪张图形卡，我的是NVIDIA的专业图形卡Quadro P600，这里它并没有使用，所以自然无法拓展屏，更不用说后面深度学习使用显卡了。一番摸爬滚打可算是把显卡弄好了，接下来讲讲这里的步骤，注意我的配置是Quadro P600，其他的显卡未做尝试<br>首先，讲讲我遇到的方法，第一个是自己下载驱动，也就是到官网上下载相应显卡的最新驱动，一个.run文件，然后安装。这个方法我失败了。另一种放大是ppa安装，这个个人认为更靠谱，毕竟这是NVIDIA在Linux上设立的一个驱动安装源，这个遇到的问题是速度慢。接下来讲第二种方法。<br>在装上Ubuntu的第一时间，我就对apt更换了阿里源，这个网上搜搜就搞定了，有了源，很多软件就能飞速下载了，然后加入ppa源：</p></li></ol><pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">sudo</span> add-apt-repository ppa:graphics-drivers/ppa    <span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行第二条命令的时候就开始龟速了，这暗示着这个源离你千里之外，没错，这个源服务器ppa.launchpad.net远在英国，而且好像没有镜像，这就很坑了。加入ppa源后就可以安装驱动了，安装驱动之前，你需要知道你的显卡需要哪一款驱动：<br>运行之后可以看到系统推荐的NVIDIA版本，就是有<code>recommended</code>字样的，我的是<code>nvidia-430</code>，接下来安装驱动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nvidia-430<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，我下载速度变得奇慢无比，所以我尝试了翻墙、换其他安装方法等，都失败了，解决方法如下：<br>参考了<a href="https://learnku.com/articles/33436#ecff77" target="_blank" rel="noopener">这篇博客</a><br>运行3个命令</p><pre class="line-numbers language-bash"><code class="language-bash">    <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> axel    <span class="token function">sudo</span> axel -o /usr/bin/apt-fast http://www.mattparnell.com/linux/apt-    fast/apt-fast.sh    <span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/bin/apt-fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>死在了第二条命令上，这里我直接打开了那个网址，可以直接看到脚本，所以我在<code>/usr/bin</code>目录下创建了文件<code>apt-fast</code>，然后将脚本内容复制进去，第三条命令是给这个脚本权限，然后执行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt-fast <span class="token function">install</span> nvidia-430<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功，且速度还看得过去，几十KB/s，但也下了几个小时。。。装完后可以打开<code>software&amp;update</code>这个系统软件，选择<code>additional drivers</code>，如果选择的是你安装的版本，就表明成功了，也可以在这里安装，本质差不多。然后重启电脑，开始无限登录，参考了<a href="https://blog.csdn.net/kingthon/article/details/81151843" target="_blank" rel="noopener">这篇博客</a>，更改后成功进入，查看电脑信息发现用的正式我的独显，于是迫不及待地插上拓展屏，果然，成功了！显示屏的设置可以在NVIDIA的软件中设置，就是<code>NVIDIA X Server Settings</code>，还有就是系统设置里面的<code>display</code>里面可以设置，今天就记录到这里吧，其他问题可以留言一起探讨。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
